name: Boom SLA check (cron)

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch: {}      # allow manual runs

concurrency:
  group: boom-sla-check
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      FORCE_RUN: 1
      # non-secret repo variables (already set in your repo)
      LOGIN_URL:                  ${{ vars.LOGIN_URL }}
      LOGIN_METHOD:               ${{ vars.LOGIN_METHOD }}
      MESSAGES_URL:               ${{ vars.MESSAGES_URL }}
      MESSAGES_METHOD:            ${{ vars.MESSAGES_METHOD }}
      CONVERSATIONS_URL:          ${{ vars.CONVERSATIONS_URL }}
      CONVERSATIONS_METHOD:       ${{ vars.CONVERSATIONS_METHOD }}
      CONVERSATIONS_BODY:          ${{ vars.CONVERSATIONS_BODY }}
      SLA_MINUTES:                ${{ vars.SLA_MINUTES }}
      DEBUG:                      ${{ vars.DEBUG || '0' }}
      DEBUG_MESSAGES:             ${{ vars.DEBUG_MESSAGES }}
      COUNT_AI_SUGGESTION_AS_AGENT: ${{ vars.COUNT_AI_SUGGESTION_AS_AGENT }}

      # secrets (already in your repo)
      BOOM_USER:   ${{ secrets.BOOM_USER }}
      BOOM_PASS:   ${{ secrets.BOOM_PASS }}
      SMTP_HOST:   ${{ secrets.SMTP_HOST }}
      SMTP_PORT:   ${{ secrets.SMTP_PORT }}
      SMTP_USER:   ${{ secrets.SMTP_USER }}
      SMTP_PASS:   ${{ secrets.SMTP_PASS }}
      ALERT_TO:    ${{ secrets.ALERT_TO }}
      ALERT_FROM_NAME: ${{ secrets.ALERT_FROM_NAME }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: .
        run: |
          ls -la
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-fund --no-audit
          fi

      # Debug the conversations listing endpoint (enable with DEBUG=1)
      - name: Debug conversations endpoint
        if: env.DEBUG == '1'
        env:
          # plumb from repo Variables or Secrets; adjust as you use it today
          CONVERSATIONS_URL: ${{ vars.CONVERSATIONS_URL || secrets.CONVERSATIONS_URL }}
        run: |
          set -euo pipefail

          # Read and sanitize the URL (strip CR/LF to avoid curl error 3)
          url_raw="${CONVERSATIONS_URL:-}"
          if [ -z "${url_raw}" ]; then
            echo "::error::CONVERSATIONS_URL is empty"; exit 1
          fi
          url="$(printf '%s' "$url_raw" | tr -d '\r\n')"

          # Warn if spaces; encode them so curl wonâ€™t choke
          if printf '%s' "$url" | grep -q ' '; then
            echo "::warning::Spaces detected in CONVERSATIONS_URL; encoding as %20"
            url="${url// /%20}"
          fi

          echo "Hitting: $url"

          # --globoff avoids curl interpreting [] in query params (e.g. filter[status]=open)
          # --fail makes curl exit non-zero on HTTP >= 400
          # --show-error prints the error text when failing
          curl -sS --fail --show-error --globoff "$url" -w "\nHTTP %{http_code}\n" || {
            code=$?
            echo "::error::curl failed with exit code $code"
            exit $code
          }

      - name: Run SLA checker
        working-directory: .
        run: node ./cron.mjs
