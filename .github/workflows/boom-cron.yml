name: Boom SLA check (cron)

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch: {}      # allow manual runs

concurrency:
  group: boom-sla-check
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      FORCE_RUN: 1
      # non-secret repo variables (already set in your repo)
      LOGIN_URL:                  ${{ vars.LOGIN_URL }}
      LOGIN_METHOD:               ${{ vars.LOGIN_METHOD }}
      MESSAGES_URL:               ${{ vars.MESSAGES_URL }}
      MESSAGES_METHOD:            ${{ vars.MESSAGES_METHOD }}
      CONVERSATIONS_URL:          ${{ vars.CONVERSATIONS_URL }}
      CONVERSATIONS_METHOD:       ${{ vars.CONVERSATIONS_METHOD }}
      CONVERSATIONS_BODY:          ${{ vars.CONVERSATIONS_BODY }}
      # alert threshold in minutes (adjust as needed)
      SLA_MINUTES: "5"
      CRON_INTERVAL_MINUTES: "5"
      ALERT_TOLERANCE_MINUTES: "0.5"
      # Turn on verbose logs for one run; remove later if noisy
      DEBUG: "1"
      # process this many conversations per run while tuning
      CHECK_LIMIT: "50"
      DEBUG_MESSAGES:             ${{ vars.DEBUG_MESSAGES }}
      COUNT_AI_SUGGESTION_AS_AGENT: ${{ vars.COUNT_AI_SUGGESTION_AS_AGENT }}

      CHECK_RECENT_COUNT:         ${{ vars.CHECK_RECENT_COUNT }}
      BACKFILL_PER_RUN:           ${{ vars.BACKFILL_PER_RUN }}
      BACKFILL_CONCURRENCY:       ${{ vars.BACKFILL_CONCURRENCY }}
      TOTAL_CONVERSATIONS_ESTIMATE: ${{ vars.TOTAL_CONVERSATIONS_ESTIMATE }}
      MAX_CONCURRENCY:            ${{ vars.MAX_CONCURRENCY }}
      APP_URL: https://app.boomnow.com
      RESOLVE_SECRET: ${{ secrets.RESOLVE_SECRET }}
      LIST_SORT_FIELD:            ${{ vars.LIST_SORT_FIELD }}
      LIST_SORT_ORDER_RECENT:     ${{ vars.LIST_SORT_ORDER_RECENT }}
      LIST_SORT_ORDER_BACKFILL:   ${{ vars.LIST_SORT_ORDER_BACKFILL }}
      LIST_LIMIT_PARAM:           ${{ vars.LIST_LIMIT_PARAM }}
      LIST_OFFSET_PARAM:          ${{ vars.LIST_OFFSET_PARAM }}
      NO_SKIP:                    ${{ vars.NO_SKIP }}

      # secrets (already in your repo)
      BOOM_USER:   ${{ secrets.BOOM_USER }}
      BOOM_PASS:   ${{ secrets.BOOM_PASS }}
      SMTP_HOST:   ${{ secrets.SMTP_HOST }}
      SMTP_PORT:   ${{ secrets.SMTP_PORT }}
      SMTP_USER:   ${{ secrets.SMTP_USER }}
      SMTP_PASS:   ${{ secrets.SMTP_PASS }}
      ALERT_TO:    ${{ secrets.ALERT_TO }}
      ALERT_FROM_NAME: ${{ secrets.ALERT_FROM_NAME }}
      LINK_SECRET:     ${{ secrets.LINK_SECRET }}
      # Auth for the conversations endpoint (either may be empty)
      BOOM_BEARER: ${{ secrets.BOOM_BEARER }}
      BOOM_COOKIE: ${{ secrets.BOOM_COOKIE }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: .
        run: |
          ls -la
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-fund --no-audit
          fi

      - name: Normalize messages URL
        shell: bash
        run: |
          set -euo pipefail
          SAMPLE_ID="00000000-0000-0000-0000-000000000000"
          NEW_VAL="${MESSAGES_URL:-}"
          # Replace {{conversationId}} if present
          NEW_VAL="${NEW_VAL//\{\{conversationId\}\}/$SAMPLE_ID}"
          # If no conversation query at all, append one
          if [[ "$NEW_VAL" != *conversation=* ]]; then
            SEP='?'; [[ "$NEW_VAL" == *\?* ]] && SEP='&'
            NEW_VAL="${NEW_VAL}${SEP}conversation=${SAMPLE_ID}"
          fi
          echo "MESSAGES_URL=${NEW_VAL}" >> "$GITHUB_ENV"
      # Sanity-check the endpoint actually returns JSON with our auth
      - name: Debug conversations endpoint (with auth)
        shell: bash
        run: |
          set -euo pipefail
          echo "CONVERSATIONS_URL=${CONVERSATIONS_URL}"
          echo "MESSAGES_URL=${MESSAGES_URL}"
          echo "--- RESPONSE STATUS + HEADERS ---"
          unset AUTH_HEADER || true
          HEADER=""
          if [[ -n "${BOOM_BEARER:-}" ]]; then
            BB=$(printf '%s' "${BOOM_BEARER}" | tr -d '\r\n')
            HEADER="Authorization: Bearer ${BB}"
          elif [[ -n "${BOOM_COOKIE:-}" ]]; then
            CK=$(printf '%s' "${BOOM_COOKIE}" | tr -d '\r\n')
            HEADER="Cookie: ${CK}"
          fi
          if [[ -n "$HEADER" ]]; then
            curl --globoff -sS -D - -o /dev/null -H "$HEADER" "$CONVERSATIONS_URL"
          else
            curl --globoff -sS -D - -o /dev/null "$CONVERSATIONS_URL"
          fi
          if [[ -n "${MESSAGES_URL:-}" ]]; then
            echo
            if [[ -n "$HEADER" ]]; then
              curl --globoff -sS -D - -o /dev/null -H "$HEADER" "$MESSAGES_URL"
            else
              curl --globoff -sS -D - -o /dev/null "$MESSAGES_URL"
            fi
          fi

      - name: Run SLA checker
        working-directory: .
        run: node ./cron.mjs
