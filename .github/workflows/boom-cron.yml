name: Boom SLA check (cron)

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch: {}      # allow manual runs

concurrency:
  group: boom-sla-check
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      FORCE_RUN: 1
      # non-secret repo variables (already set in your repo)
      LOGIN_URL:                  ${{ vars.LOGIN_URL }}
      LOGIN_METHOD:               ${{ vars.LOGIN_METHOD }}
      MESSAGES_URL:               ${{ vars.MESSAGES_URL }}
      MESSAGES_METHOD:            ${{ vars.MESSAGES_METHOD }}
      CONVERSATIONS_URL:          ${{ vars.CONVERSATIONS_URL }}
      CONVERSATIONS_METHOD:       ${{ vars.CONVERSATIONS_METHOD }}
      CONVERSATIONS_BODY:          ${{ vars.CONVERSATIONS_BODY }}
      SLA_MINUTES:                ${{ vars.SLA_MINUTES }}
      DEBUG:                      ${{ vars.DEBUG || '0' }}
      DEBUG_MESSAGES:             ${{ vars.DEBUG_MESSAGES }}
      COUNT_AI_SUGGESTION_AS_AGENT: ${{ vars.COUNT_AI_SUGGESTION_AS_AGENT }}

      CHECK_RECENT_COUNT:         ${{ vars.CHECK_RECENT_COUNT }}
      BACKFILL_PER_RUN:           ${{ vars.BACKFILL_PER_RUN }}
      BACKFILL_CONCURRENCY:       ${{ vars.BACKFILL_CONCURRENCY }}
      TOTAL_CONVERSATIONS_ESTIMATE: ${{ vars.TOTAL_CONVERSATIONS_ESTIMATE }}
      MAX_CONCURRENCY:            ${{ vars.MAX_CONCURRENCY }}
      CONVERSATION_LINK_TEMPLATE: ${{ vars.CONVERSATION_LINK_TEMPLATE }}
      LIST_SORT_FIELD:            ${{ vars.LIST_SORT_FIELD }}
      LIST_SORT_ORDER_RECENT:     ${{ vars.LIST_SORT_ORDER_RECENT }}
      LIST_SORT_ORDER_BACKFILL:   ${{ vars.LIST_SORT_ORDER_BACKFILL }}
      LIST_LIMIT_PARAM:           ${{ vars.LIST_LIMIT_PARAM }}
      LIST_OFFSET_PARAM:          ${{ vars.LIST_OFFSET_PARAM }}
      CRON_INTERVAL_MIN:          ${{ vars.CRON_INTERVAL_MIN }}
      NO_SKIP:                    ${{ vars.NO_SKIP }}

      # secrets (already in your repo)
      BOOM_USER:   ${{ secrets.BOOM_USER }}
      BOOM_PASS:   ${{ secrets.BOOM_PASS }}
      SMTP_HOST:   ${{ secrets.SMTP_HOST }}
      SMTP_PORT:   ${{ secrets.SMTP_PORT }}
      SMTP_USER:   ${{ secrets.SMTP_USER }}
      SMTP_PASS:   ${{ secrets.SMTP_PASS }}
      ALERT_TO:    ${{ secrets.ALERT_TO }}
      ALERT_FROM_NAME: ${{ secrets.ALERT_FROM_NAME }}
      BOOM_COOKIE: ${{ secrets.BOOM_COOKIE }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        working-directory: .
        run: |
          ls -la
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-fund --no-audit
          fi

      - name: Debug conversations endpoint
        continue-on-error: true
        if: env.DEBUG == '1'
        env:
          # Use whichever you already have configured
          CONVERSATIONS_URL: ${{ vars.CONVERSATIONS_URL || secrets.CONVERSATIONS_URL }}
        shell: bash
        run: |
          set -euo pipefail

          raw="${CONVERSATIONS_URL:-}"
          if [ -z "$raw" ]; then
            echo "::error::CONVERSATIONS_URL is empty"; exit 1
          fi

          # Sanitize: strip CR/LF/TAB and any pasted quotes/brackets
          url="$(printf '%s' "$raw" | tr -d '\r\n\t')"
          url="${url#<}"; url="${url%>}"
          url="${url#\"}"; url="${url%\"}"
          url="${url#\'}"; url="${url%\'}"

          # Encode spaces if any
          case "$url" in *" "*) url="${url// /%20}";; esac

          echo "Hitting (sanitized): $url"

          # Print raw bytes so hidden characters are visible in logs
          printf 'URL bytes (hex): '
          printf '%s' "$url" | od -An -t x1 | tr -d '\n'
          echo

          # Safe curl: disable globbing; follow redirects; fail clearly
          curl -sS -L --fail --show-error --globoff "$url" -w "\nHTTP %{http_code}\n" || true

      - name: Debug conversations endpoint (rebuild query)
        if: env.DEBUG == '1'
        shell: bash
        run: |
          set -euo pipefail
          base="https://app.boomnow.com/api/conversations/all"
          echo "Hitting (rebuilt with --get): $base ? all=true"
          curl -sS -L --fail --show-error --globoff --get "$base" \
            --data-urlencode "all=true" \
            -w "\nHTTP %{http_code}\n"

      - name: Normalize messages URL
        shell: bash
        run: |
          if [[ "$MESSAGES_URL" != *"{{conversationId}}"* && "$MESSAGES_URL" != *"conversation="* ]]; then
            echo "MESSAGES_URL=${MESSAGES_URL}?conversation={{conversationId}}" >> $GITHUB_ENV
          else
            echo "MESSAGES_URL=${MESSAGES_URL}" >> $GITHUB_ENV
          fi

      - name: Run SLA checker
        working-directory: .
        run: node ./cron.mjs
